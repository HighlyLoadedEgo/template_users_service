version: "3.9"

services:
  api:
    container_name: users.api
    build:
      context: .
    restart: unless-stopped
    environment:
      - CONFIG_PATH=${CONFIG_PATH}
    volumes:
      - ./config:/app/config:ro
      - ./private.key:/app/private.key
      - ./public.key:/app/public.key
    depends_on:
      database:
        condition: service_healthy
    networks:
      - users.postgres.network
    expose:
      - ${EXPOSE_SERVER_PORT}
    ports:
      - ${EXPOSE_SERVER_PORT}:${SERVER_PORT}
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsSL http://localhost:${SERVER_PORT}/api/healthcheck" ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s

  migration:
    container_name: users.migration
    build:
      context: .
    restart: on-failure
    depends_on:
      database:
        condition: service_healthy
    networks:
      - users.postgres.network
    volumes:
      - ./config:/app/config:ro
      - ./alembic.ini:/app/alembic.ini:ro
      - ./src:/app/src:ro
      - ./migrations:/app/migrations:ro
    environment:
      - CONFIG_PATH=${CONFIG_PATH}
    command: [ "python", "-m", "alembic", "upgrade", "head" ]

  database:
      container_name: users.database
      hostname: users.database
      image: postgres:16-alpine
      restart: unless-stopped
      environment:
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}
        PGDATA: ${POSTGRES_PGDATA}
      ports:
        - ${POSTGRES_PORT}:5432
      volumes:
        - users.postgres.data:${POSTGRES_PGDATA}:rw
      networks:
        - users.postgres.network
      env_file:
        - .env
      healthcheck:
        test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
        interval: 10s
        timeout: 60s
        retries: 5
        start_period: 10s

  postgres_backup:
    container_name: users.postgres_backup
    image: prodrigestivill/postgres-backup-local:15-alpine
    networks:
      - users.postgres.network
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=database
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_DIR=/backups
      - POSTGRES_EXTRA_OPTS=-Z6 --schema=public --blobs
      - SCHEDULE=${POSTGRES_BACKUP_SCHEDULE}
      - HEALTHCHECK_PORT=${PG_DUMP_HEALTHCHECK_PORT}
    volumes:
      - ${POSTGRES_BACKUP_DIR}:/backups

volumes:
  users.postgres.data: {}

networks:
  users.postgres.network: {}
